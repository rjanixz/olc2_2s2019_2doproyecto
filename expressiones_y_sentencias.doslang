program minimos;

type
	numero = integer;
	number = integer;
	valor_numerico = numero;
	cadena = string;
	caracter = char;
	double = real;
	decision = boolean;
	TItemBubbleSort=integer;

	expenses = real;
	SUMMER = (April, May, June, July, September); 
	COLORS = (Red, Green, Blue, Yellow, Magenta, Cyan, Black, White);
	TRANSPORT = (Bus, Train, Airplane, Ship);

const (*pagina 27 indica que la declaracion de constantes deben llevar tipo*)
	pi :real= 3.141593;
	e :real= 2.7182;
	verdadero :boolean= true;
	falso :boolean= false;

var
   a, b : integer;
   positive : 1 ... 100;
   negative : -100 ... -1;
   chars : 'A' ... 'Z';
   grade : char;
   arr: array[50..150] of integer;

procedure cambio(var x, y: integer);
var
   temp: integer;

begin
   temp := x;
   x:= y;
   y := temp;
end;

procedure validator(x,y:integer);
begin
	if(x=200) then
		writeln("Paso por referencia OK") (* Aqui va sin punto y coma *)
	else 
		writeln("Paso por referencia no cool :(");
end;

procedure basicFunctions();
var
	cont:integer = 0;
begin
	while(cont<85) do
	begin
		case (cont) of
			20, 40: 
				begin
					if(cont=20) then
						writeln("Segundo Valor Correcto 50" ) (* Aqui va sin punto y coma *)
					else
						writeln("Tercer valor correcto 75");
					
					cont:=cont*2-1;
				end;
			10 : 
				begin
					writeln("Primer Valor Correcto 25" );
					cont:=cont*2-1;
				end;
			15 : writeln("Error 1 en case");
			30 : writeln("Error 2 en case");
			50 : writeln("Multiples errores en case, 0");
			80 : writeln("Todos los valores correctos, While, If y Case 100");
		end;
		cont := cont+1;
	end;
end;

function validacionAritmetica():integer;
var 
  valor1: valor_numerico = 1;
  valor2: valor_numerico = 2;
  valor3: valor_numerico = 3;
  valor4: numero = 4;
  valor5: numero = 5;
  valor6: number = 6;
  valor7: number = 7;
  valorDiv: real = 0.0;
  valorRes: integer;
begin
  valor1 := valor1 * 1;           {Se utilizan para validar reglas de optimizacion}
  valor2 := valor1 + 0;           {Se utilizan para validar reglas de optimizacion}
  valor3 := valor1 + 0;           {Se utilizan para validar reglas de optimizacion}
  valorDiv := valor1 / 1;         {Se utilizan para validar reglas de optimizacion}
  valor2 := valor1;               {Se utilizan para validar reglas de optimizacion}
  valor1 := valor2;               {Se utilizan para validar reglas de optimizacion}
  valorRes := 20+valor4*valor5-valor6+valor7*100+50*80+45;
  valorRes := valorRes * 5 - 9 + (5+2)-(5*(4-3));
  writeln("El resultado de la operacion deberia ser 23888, es: ",valorRes);
  validacionAritmetica := valorRes; {Se utilizan para validar reglas de optimizacion}
end;


procedure validacionLogRel(result:integer);
  var 
	varVerdadera: decision = true AND true;
	varFalsa: decision = false;
  begin
	writeln(result);
	if (varFalsa = true AND varVerdadera) OR varVerdadera AND (2=5) OR (result = 23888) then
		begin
			writeln("Primera prueba Funciono");
		  if (2 < 3) = (5 < 7) then
			writeln("Segunda Prueba Funciono") (* Aqui va sin punto y coma *)
		  else
			writeln("Segunda Prueba Fallo, 50 en relacionales");
		end  (* Aqui va sin punto y coma *)
	else
	  writeln("0 en relacionales");
  end;



function circleArea(radio:numero):real;
begin
	circleArea := pi*radio*radio;
end;

procedure swap( var a, b:TItemBubbleSort );
var
  temp : TItemBubbleSort;
  
begin
  temp := a;
  a := b;
  b := temp;
end;


procedure desorden(var a: array[50..150] of TItemBubbleSort);
var
	i:numero;
begin
  for i:= 50 to 149 do (* El rango esta entre 50 - 149 *)
  begin
	  a[149 - i + 50] := i;(*debido al cambio que se hizo en el rango del arreglo en linea 31*)
  end;
end;

procedure ordenamiento( var a: array[50..150] of TItemBubbleSort );
var
  n, newn, i:integer;
begin
  desorden(a);
  n := 149;(*funcion HIGH no existe en el lenguaje y el numero max es 149 *)
  repeat
	newn := 0;
	for i := 51 to n   do
	  begin
		if a[ i - 1 ] > a[ i ] then
		  begin
			swap( a[ i - 1 ], a[ i ]);
			newn := i ;
		  end;
	  end ;
	n := newn;
  until n <> 0;(*se realizaba solo una iteracion*)
end;


begin
   a := 100;
   b := 200;
   
   cambio(a, b);
   validator(a,b);
   writeln(circleArea(4));
   basicfunctions();   
   validacionLogRel(validacionAritmetica());
   ordenamiento(arr);
   writeln(arr[120]);
   
   for a:=50 to 149 do (* El rango va de 50 - 149 *)
	writeln(arr[a]);
   
end.
