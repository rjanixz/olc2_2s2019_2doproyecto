{
	@author: rjanixz
	@entrada: [40, 21, 1, 3, 14, 4]
	@salida: [1, 3, 4, 14, 21, 40]
	@descripcion: Este programa recibe como entrada un arreglo de 6 posiciones de valores enteros y los ordena.
}
program OrdenamientoRapido;
var
	v       : array[0 .. 6] of integer; (* Es con dos puntos *)


(* paso el arreglo por referencia *)
procedure quick_sort(var A : array[0 .. 6] of integer; izq, der : integer); (* Es con dos puntos *)
var
	pivote	: integer = a[izq];		(* doslang es case insensitive *)
	i		: integer = izq;		(* i realiza la búsqueda de izquierda a derecha *)
	d		: integer = der;		(* d realiza la búsqueda de derecha a izquierda *)
	aux		: integer;
begin

	(* WHILEs anidados *)
	while i < d do
	begin
		(* Whiles de una sentencia. no necesita begind/end *)
		while a[i] <= pivote AND i < d do i := i+1;
		WHILE a[D] > pivote DO d := d-1;

		(* parentesis innecesarions *)
		if ((((i < d)))) then		(* sino se han cruzado *)
		begin
			aux := A[i];				(* los intercambia *)
			a[i] := A[d];
			A[D] := aux;
		end;
	end;


	A[izq] := A[D];					(* se colocal el pivote en su lugar de forma que tendremos *)
	A[D] := pivote;				(* los menores a la izquierda y los mayores a su derecha *)

	(* IFs sin begin/end *)
	if izq < d-1 then quick_sort(A, izq, d-1);
	if d+1 < d then quick_sort(A, d+1, der);
end;


(* paso por valor el arreglo :O *)
procedure imprimirArreglo(arrayValor : array[0 .. 6] of integer); (* Es con dos puntos *)
var 
	indiceArregloLocal : integer = 123456789; (* asignación intencional *)
begin
	for indiceArregloLocal := 0 to 5 do (* El rango es de 0 - 5 *)
	begin
		if indiceArregloLocal < 5 then
			wRite(arrayValor[indiceArregloLocal], ", ") (* Aqui no va punto y coma *)
		else
			wRiteLn(arrayValor[indiceArregloLocal]);
	end;
end;

begin
	v[0] := 40;
	v[1] := 21;
	v[2] := 1;
	v[3] := 3;
	v[4] := 12;
	v[5] := 4;

	wRiteLn("Antes del sort: ");
	imprimirArreglo(v);
	quick_sort(v, 0, 5);
	wRiteLn("Despues del sort: ");
	imprimirArreglo(v);
end.

